.TH favorites.get 3 "29 Jan 2021" "pyopenTIDAL 1.0.1" "pyopenTIDAL Manual"
.SH NAME
favorites.get \- Request user-based metadata
.SH SYNOPSIS
.B import openTIDAL

.nf
.BI "class favorites (" object "):"
.BI "    def get (" self ", " session ", " suffix ", " limit " , " offset " , " order " , " orderDirection " , " threadHandle ")"
.fi
.SH DESCRIPTION
The favorites.get service function requests TIDAL metadata.
The prefix and suffix parameter are used to specify the endpoint of the request.
This service call \fBmust\fP have a corresponding call to \fIfavorites.cleanup(3)\fP when the operation is complete.

.nf
.B Suffixes
"ids", "albums", "tracks", "videos", "artists", "playlists", "mixes"

.B Pagination
.fi
Use the limit and offset parameters to control metadata pagination.
Keep in mind that the TIDAL API will error out on certain limits.

.nf
.B Sorting
.fi
order: "DATE", "NAME", "ARTIST", "RELEASE_DATE", "MIX_TYPE"

orderDirection: "ASC", "DESC"

.nf
.B Thread Handle
.fi
You must never share the same handle in multiple threads. You can pass the handles around among threads, but you must never use a single handle from more than one thread at any given time.

Call \fIhttp(3)\fP to get the session main handle.
.SH RETURN VALUE
If no memory allocation error occurred in allocating the content container, a
pointer will be returned.
Otherwise, an exception is thrown.
.SH "SEE ALSO"
.BR favorites.cleanup "(3), " favorites.deleteItem "(3), " favorites.addItem "(3), "
.BR stream.getTrackStream "(3), " stream.getVideoStream "(3), " base.getStandard "(3) "
